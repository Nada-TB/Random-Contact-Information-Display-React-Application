{"version":3,"sources":["conatct-card.js","App.js","serviceWorker.js","index.js"],"names":["Contactcard","props","useState","showAge","setShowAge","className","src","image","alt","name","email","age","onClick","App","contacts","setContacts","useEffect","https","XMLHttpRequest","onreadystatechange","this","readyState","status","response","JSON","parse","results","open","send","map","element","last","first","dob","picture","large","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8PAuBeA,MApBf,SAAsBC,GAAO,IAAD,EACIC,oBAAS,GADb,mBACjBC,EADiB,KACRC,EADQ,KAKxB,OACI,yBAAKC,UAAU,gBACX,yBAAKC,IAAKL,EAAMM,MAAOC,IAAI,YAC3B,6BACI,oCAAUP,EAAMQ,MAChB,qCAAWR,EAAMS,QACL,IAAXP,EAAiB,oCAAUF,EAAMU,IAAhB,QAA6B,KAHnD,IAII,4BAAQC,QAVD,WACfR,GAAYD,KASJ,cCsBDU,MAjCf,WAAgB,IAAD,EACiBX,mBAAS,IAD1B,mBACNY,EADM,KACIC,EADJ,KAiBb,OAfAC,qBAAU,WACR,IAAMC,EAAO,IAAIC,eACjBD,EAAME,mBAAmB,WACzB,GAAqB,IAAlBC,KAAKC,YAAgC,MAAdD,KAAKE,OAAa,CAC1C,IAAIC,EAAWC,KAAKC,MAAML,KAAKG,UAC/BR,EAAYQ,EAASG,WAI3BT,EAAMU,KAAK,MAAO,qEAClBV,EAAMW,SAEF,IAIA,oCACA,yEACCd,EAASe,KAAK,SAAAC,GAAO,OACpB,kBAAC,EAAD,CAAarB,KAAMqB,EAAQrB,KAAKsB,KAAM,IAAKD,EAAQrB,KAAKuB,MACxDtB,MAAOoB,EAAQpB,MACfC,IAAKmB,EAAQG,IAAItB,IACjBJ,MAAOuB,EAAQI,QAAQC,WAIzB,gCAAQ,kECpBQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.756e48e1.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\n\r\n\r\nfunction Contactcard (props){\r\n    const [showAge, setShowAge]=useState(false);\r\n    const handleClick =()=>{\r\n        setShowAge(!showAge);\r\n    }\r\n    return(\r\n        <div className=\"contact-card\">\r\n            <img src={props.image} alt=\"profile\" />\r\n            <div>\r\n                <p>Name: {props.name}</p>\r\n                <p>Email: {props.email}</p>\r\n                {showAge=== true? <p> Age: {props.age} ans</p>:null} {/*this part appears onclick and depends on showAge Value */}\r\n                <button onClick={handleClick}>show me</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default Contactcard;","import React,{useState, useEffect} from 'react';\nimport './style.css';\nimport Contactcard from './conatct-card.js';\n\nfunction App() {\n  const [contacts, setContacts]=useState([]);\n  useEffect(()=>{\n    const https= new XMLHttpRequest();\n    https.onreadystatechange=function(){\n    if(this.readyState===4 && this.status===200){\n      let response = JSON.parse(this.response); \n      setContacts(response.results);\n    }\n}\n\nhttps.open('GET', 'https://randomuser.me/api/?inc=name,email,dob, picture&&results=4');\nhttps.send();\n    \n  },[]);\n\n\n  return(\n    <>\n    <h1>Random contacts list using randomuser API</h1>\n    {contacts.map( element =>(\n      <Contactcard name={element.name.last +\" \"+ element.name.first}\n      email={element.email} \n      age={element.dob.age}\n      image={element.picture.large}\n      />\n    ))}\n    \n    <footer><p>Created by Nada TEBBA. June 2020</p></footer>\n    </>\n  )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}